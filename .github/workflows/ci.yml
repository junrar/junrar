name: CI

on:
  pull_request:
  push:
    branches-ignore:
      - 'dependabot/**'
  workflow_dispatch:
    inputs:
      perform_release:
        description: 'Perform release'
        default: false
        type: boolean
      bump:
        description: 'Bump type'
        required: false
        default: 'next'
        type: choice
        options:
          - 'next'
          - 'major'
          - 'minor'
          - 'patch'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
    name: Test on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v5
        with:
          java-version: '21'
          java-package: 'jdk'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      - name: Build
        run: ./gradlew build
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jdk-${{ matrix.os }}
          path: build/test-results/
      - name: Jacoco
        run: ./gradlew jacocoTestReport
      - uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest'

  version:
    runs-on: macos-latest
    if: github.repository_owner == 'junrar' && github.ref == 'refs/heads/master'
    outputs:
      version_current: ${{ steps.versions.outputs.version_current }}
      version_next: ${{ steps.versions.outputs.version_next }}
      should_release: ${{ steps.versions.outputs.should_release }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install svu
        run: brew install caarlos0/tap/svu
      - name: Compute next version for release
        if: inputs.perform_release
        run: |
          echo "VERSION_NEXT=`svu ${{ inputs.bump }}`" | tee -a $GITHUB_ENV
          echo "VERSION_NEXT_SUFFIX=`svu ${{ inputs.bump }}`" | tee -a $GITHUB_ENV
      - name: Compute next version for snapshot
        if: inputs.perform_release != true
        run: |
          echo "VERSION_NEXT=`svu ${{ inputs.bump || 'next' }}`" | tee -a $GITHUB_ENV
          echo "VERSION_NEXT_SUFFIX=`svu ${{ inputs.bump || 'next' }}`-SNAPSHOT" | tee -a $GITHUB_ENV
      - name: Set Versions
        id: versions
        run: |
          echo "version_current=`svu current`" >> $GITHUB_OUTPUT
          echo "version_next=${{ env.VERSION_NEXT_SUFFIX }}" >> $GITHUB_OUTPUT
          [[ `svu current` != ${{ env.VERSION_NEXT }} ]] && echo "should_release=true" >> $GITHUB_OUTPUT || echo

  release:
    needs: [ version, test ]
    runs-on: ubuntu-latest
    if: needs.version.outputs.should_release
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Display versions
        run: |
          echo "Current version: ${{ needs.version.outputs.version_current }}, should release: ${{ needs.version.outputs.version_next }}"
      - name: Update version in gradle.properties
        run: echo "version=${{ needs.version.outputs.version_next }}" > gradle.properties
      - uses: actions/setup-java@v5
        with:
          java-version: '21'
          java-package: 'jdk'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      - name: Nexus publish
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.MAVENCENTRAL_USER }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.MAVENCENTRAL_PASSWORD }}
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
      - name: JReleaser full release
        if: inputs.perform_release
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew jreleaserFullRelease
      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            komga/build/jreleaser/trace.log
            komga/build/jreleaser/output.properties
      - name: Release commit and push
        uses: EndBug/add-and-commit@v9
        if: inputs.perform_release
        with:
          message: 'chore(release): ${{ needs.version.outputs.version_next }} [skip ci]'
          default_author: github_actions

