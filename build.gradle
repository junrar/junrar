plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'dev.jacomet.logging-capabilities' version '0.11.1'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'org.jreleaser' version '1.20.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.17'
    if (version.toString().endsWith('.0.0')) {
        annotationProcessor 'com.github.gotson.bestbefore:bestbefore-processor-java:0.2.0'
    }

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.19'
    testImplementation 'commons-io:commons-io:2.20.0'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    testImplementation 'org.assertj:assertj-core:3.27.6'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.3.0'
}

group = 'com.github.junrar'
description = 'rar decompression library in plain java'

java {
    withJavadocJar()
    withSourcesJar()
}
compileJava {
    options.release = 8
}

jreleaser {
    project {
        description = 'rar decompression library in plain java'
        copyright = 'Junrar team'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}🚨 {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = '🏎 Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                extraProperties.put('categorizeScopes', true)
                append {
                    enabled = true
                    title = '# [{{projectVersion}}]({{repoUrl}}/compare/{{previousTagName}}...{{tagName}}) ({{#f_now}}YYYY-MM-dd{{/f_now}})'
                    content = """
                              {{changelogTitle}}
                              {{changelogChanges}}
                              """.stripIndent()
                }
            }

            issues {
                enabled = true
                comment = '🎉 This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
    files {
        artifact {
            path = 'build/libs/{{projectName}}-{{projectVersion}}.jar'
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Java Unrar'
                description = "${description}"
                url = 'https://github.com/junrar/junrar'
                licenses {
                    license {
                        name = 'UnRar License'
                        url = 'https://github.com/junrar/junrar/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'gotson'
                        name = 'Gauthier Roebroeck'
                    }
                }
                scm {
                    url = 'https://github.com/junrar/junrar.git'
                }
            }
        }
    }
}

signing {
    required { false }
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        // see https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.wrapper {
    gradleVersion = '8.14'
    distributionType = Wrapper.DistributionType.ALL
}

testing {
    suites {
        test {
            useJUnitJupiter('5.9.1')
        }

        regressionTest(JvmTestSuite) {
            useJUnitJupiter('5.9.1')
            dependencies {
                implementation project(':')
                implementation 'org.assertj:assertj-core:3.27.6'
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
                implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.20.0'
                implementation 'org.junit-pioneer:junit-pioneer:2.3.0'
            }

            targets {
                all {
                    testTask.configure {
                        systemProperty 'regressionTest.resourcesDir', sourceSets.named('regressionTest').get().resources.getSrcDirs().first()
                        useJUnitPlatform {
                            includeTags 'check' // in order to run `gradle regressionTest`
                        }
                    }
                }
            }
        }
    }
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
    toolVersion = '10.3.2'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(false)
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    // disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
